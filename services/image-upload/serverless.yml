# Image Upload Microservice
#  using Serverless framework

service: image-upload
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

frameworkVersion: '>=2.0.0 <3.0.0'

# enable v3 env variable handling while using v2
# @todo: remove once upgraded to v3
useDotenv: true

# custom variables - you should change these to your own values
custom:
  region: ${env:REGION, "us-east-1"}
  domain: ${env:DOMAIN, "domain.com"}
  prefix: ${env:PREFIX, "aws-com-domain"}
  apiKey: ${env:API_KEY, ""}
  maxUploadBytes: "6291456"
  maxUploadWidth: "2000"
  maxUploadHeight: "2000"

provider:
  name: aws
  region: ${self:custom.region}
  runtime: go1.x
  deploymentBucket:
    name: code.${self:custom.domain}
  
  # enable v3 API gateway naming convention
  # @todo: remove once upgraded to v3
  apiGateway:
    shouldStartNameWithService: true

package:
  exclude:
    - ./**
  include:
    - bin/**

functions:

  # image-upload function
  image-upload:
    handler: bin/image-upload
    name: ${self:custom.prefix}-${opt:stage,'dev'}-lambda-image-upload
    role: ImageUploadLambdaRole
    events:
      - http:
          path: image/upload-url
          method: get
      - http:
          path: image/process-upload
          method: post
      - http:
          path: image/delete/{image_key+}
          method: delete
          request:
            parameters:
              paths:
                image_key: true
    environment:
      AWS_S3_BUCKET_UPLOAD: !Ref ImageUploadBucket
      AWS_S3_BUCKET_PUBLIC: !Ref ImageStaticBucket
      MAX_BYTES: ${self:custom.maxUploadBytes}
      MAX_WIDTH: ${self:custom.maxUploadWidth}
      MAX_HEIGHT: ${self:custom.maxUploadHeight}
      API_KEY: ${self:custom.apiKey}

# CloudFormation resource templates
resources:
  Resources:

    # define IAM role for the Image Upload Lambda
    ImageUploadLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.prefix}-${opt:stage,'dev'}-image-upload-lambda-role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Path: /
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
          - PolicyName: ${self:custom.prefix}-${opt:stage,'dev'}-upload-url-lambda-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action: s3:*
                  Resource:
                    - !Join 
                      - ''
                      - - 'arn:aws:s3:::'
                        - !Ref ImageUploadBucket
                    - !Join 
                      - ''
                      - - 'arn:aws:s3:::'
                        - !Ref ImageUploadBucket
                        - '/*'
                    - !Join 
                      - ''
                      - - 'arn:aws:s3:::'
                        - !Ref ImageStaticBucket
                    - !Join 
                      - ''
                      - - 'arn:aws:s3:::'
                        - !Ref ImageStaticBucket
                        - '/*'

    # define image upload bucket
    ImageUploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: images.upload.${opt:stage,'dev'}.${self:custom.domain}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
              AllowedOrigins:
                - '*'
              Id: Main
              MaxAge: 3000
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        LifecycleConfiguration:
          Rules:
            - Id: Expiration Policy
              ExpirationInDays: 14
              Status: Enabled
    
    # define public image bucket
    ImageStaticBucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: Retain
      Properties:
        BucketName: images.static.${opt:stage,'dev'}.${self:custom.domain}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
