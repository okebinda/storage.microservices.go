# Image Upload Microservice
#  using Serverless framework

service: image-upload
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

frameworkVersion: '>=2.0.0 <3.0.0'

custom:
  domain: "domain.com"
  prefix: "aws-com-domain"

provider:
  name: aws
  runtime: go1.x
  deploymentBucket:
    name: code.${self:custom.domain}

package:
  exclude:
    - ./**
  include:
    - bin/**
  # individually: true

functions:

  # upload-url function
  upload-url:
    handler: bin/upload-url
    name: ${self:custom.prefix}-${opt:stage,'dev'}-lambda-upload-url
    role: UploadURLLambdaRole
    events:
      - http:
          path: upload-url
          method: get
          request:
            parameters:
              querystrings:
                directory: true
                owner_id: true
                extension: true
    environment:
      AWS_S3_BUCKET_UPLOAD: !Ref ImageUploadBucket
  
  # upload-image function
  upload-image:
    handler: bin/upload-image
    name: ${self:custom.prefix}-${opt:stage,'dev'}-lambda-upload-image
    role: ImageUploadLambdaRole
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - ImageUploadQueue
              - Arn
    environment:
      AWS_S3_BUCKET_UPLOAD: !Ref ImageUploadBucket
      AWS_S3_BUCKET_PUBLIC: !Ref ImageStaticBucket
      MAX_BYTES: "6291456"
      MAX_WIDTH: "1200"
      MAX_HEIGHT: "1200"
      CALLBACK_QUEUE:
        Fn::GetAtt:
          - ImageUploadCallbackQueue
          - QueueName

  # upload-image-callback function
  upload-image-callback:
    handler: bin/upload-image-callback
    name: ${self:custom.prefix}-${opt:stage,'dev'}-lambda-upload-image-callback
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - ImageUploadCallbackQueue
              - Arn
    environment:
      ENVIRONMENT: "TEST"
      # API_SECRET_KEY: "no"
      API_USERNAME: "no"
      API_PASSWORD: "no"

# CloudFormation resource templates
resources:
  Resources:

    # define IAM role for the Upload URL Lambda
    UploadURLLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.prefix}-${opt:stage,'dev'}-upload-url-lambda-role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Path: /
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
          - PolicyName: ${self:custom.prefix}-${opt:stage,'dev'}-upload-url-lambda-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action: s3:*
                  Resource:
                    - !Join 
                      - ''
                      - - 'arn:aws:s3:::'
                        - !Ref ImageUploadBucket
                    - !Join 
                      - ''
                      - - 'arn:aws:s3:::'
                        - !Ref ImageUploadBucket
                        - '/*'

    # define IAM role for the Image Upload Lambda
    ImageUploadLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.prefix}-${opt:stage,'dev'}-upload-image-lambda-role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Path: /
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
          - arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
          - PolicyName: ${self:custom.prefix}-${opt:stage,'dev'}-upload-image-lambda-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action: s3:*
                  Resource:
                    - !Join 
                      - ''
                      - - 'arn:aws:s3:::'
                        - !Ref ImageUploadBucket
                    - !Join 
                      - ''
                      - - 'arn:aws:s3:::'
                        - !Ref ImageUploadBucket
                        - '/*'
                    - !Join 
                      - ''
                      - - 'arn:aws:s3:::'
                        - !Ref ImageStaticBucket
                    - !Join 
                      - ''
                      - - 'arn:aws:s3:::'
                        - !Ref ImageStaticBucket
                        - '/*'
                - Effect: Allow
                  Action: 
                    - sqs:SendMessage
                    - sqs:GetQueueUrl
                  Resource:
                    Fn::GetAtt:
                      - "ImageUploadCallbackQueue"
                      - "Arn"

    # define image upload bucket
    ImageUploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: images.upload.${opt:stage,'dev'}.${self:custom.domain}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
              AllowedOrigins:
                - '*'
              Id: Main
              MaxAge: 3000
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        LifecycleConfiguration:
          Rules:
            - Id: Expiration Policy
              ExpirationInDays: 14
              Status: Enabled
    
    # define public image bucket
    ImageStaticBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: images.static.${opt:stage,'dev'}.${self:custom.domain}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false

    # define a dead letter queue
    DeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.prefix}-${opt:stage,'dev'}-sqs-dead-letter-queue
        DelaySeconds: 0
        MessageRetentionPeriod: 864000
        VisibilityTimeout: 30
    
    # define an image upload queue
    ImageUploadQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.prefix}-${opt:stage,'dev'}-sqs-upload-image-queue
        DelaySeconds: 0
        MaximumMessageSize: 10240
        MessageRetentionPeriod: 86400
        VisibilityTimeout: 300
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - "DeadLetterQueue"
              - "Arn"
          maxReceiveCount : 5

    # define an image upload callback queue
    ImageUploadCallbackQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.prefix}-${opt:stage,'dev'}-sqs-upload-image-callback-queue
        DelaySeconds: 0
        MaximumMessageSize: 10240
        MessageRetentionPeriod: 86400
        VisibilityTimeout: 300
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - "DeadLetterQueue"
              - "Arn"
          maxReceiveCount : 5

    # define an API gateway to receive messages for SQS
    APIGateway:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: ${self:custom.prefix}-${opt:stage,'dev'}-apigw-upload-image-queue
        Description: API Endpoint to receive JSON payloads and queue in SQS

    # define an IAM role for API gateway
    APIGatewayRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            - Action:
                - sts:AssumeRole
              Effect: Allow
              Principal:
                Service:
                  - apigateway.amazonaws.com
          Version: '2012-10-17'
        Path: /
        Policies:
          - PolicyDocument:
              Statement:
                - Action: sqs:SendMessage
                  Effect: Allow
                  Resource: !GetAtt 'ImageUploadQueue.Arn'
                - Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Effect: Allow
                  Resource: '*'
              Version: '2012-10-17'
            PolicyName: ${self:custom.prefix}-${opt:stage,'dev'}-apig-sqs-send-msg-policy
        RoleName: ${self:custom.prefix}-${opt:stage,'dev'}-apig-sqs-send-msg-role

    # define API REST method for submitting to upload image queue
    PostMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        AuthorizationType: NONE
        HttpMethod: POST
        Integration:
          Credentials: !GetAtt 'APIGatewayRole.Arn'
          IntegrationHttpMethod: POST
          IntegrationResponses:
            - StatusCode: '200'
          PassthroughBehavior: NEVER
          RequestParameters:
            integration.request.header.Content-Type: '''application/x-www-form-urlencoded'''
          RequestTemplates:
            application/json: Action=SendMessage&MessageBody=$input.body
          Type: AWS
          Uri: !Sub arn:aws:apigateway:${AWS::Region}:sqs:path/${AWS::AccountId}/${ImageUploadQueue.QueueName}
        MethodResponses:
          - ResponseModels:
              application/json: Empty
            StatusCode: '200'
        ResourceId: !Ref 'enqueueResource'
        RestApiId: !Ref 'APIGateway'
    
    # API path: /v1
    v1Resource:
      Type: AWS::ApiGateway::Resource
      Properties:
        ParentId: !GetAtt 'APIGateway.RootResourceId'
        PathPart: v1
        RestApiId: !Ref 'APIGateway' 

    # API path: /v1/enqueue
    enqueueResource:
      Type: AWS::ApiGateway::Resource
      Properties:
        ParentId: !Ref 'v1Resource'
        PathPart: enqueue
        RestApiId: !Ref 'APIGateway'
